#! /usr/bin/env python

import sys
import outcar as o
import argparse

def pretty_print_elastic_tensor(m):
    pass
    

def elastic_tensor_total(file):
    print 'Total Elastic Moduli (GPa)'
    print '------------------------- '
    print 0.1*out.get_elastic_moduli_total()
    print

def elastic_tensor_symmetric(files):
    print 'Shape Contribution to Elastic Moduli (GPa)'
    print '------------------------------------------'
    print 0.1*out.get_elastic_moduli_symmetric()
    print

def elastic_tensor_ionic(files):
    print 'Ionic Contribution to Elastic Moduli (GPa)'
    print '------------------------------------------'
    print 0.1*out.get_elastic_moduli_ionic()
    print

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Prints the elastic tensors from OUTCAR')
    parser.add_argument('-t', '--total', action='store_true',
            help='total elastic tensor')
    parser.add_argument('-s', '--sym', action='store_true',
            help='symmetrized elastic tensor obtained by change in shape of supercell')
    parser.add_argument('-i', '--ionic', action='store_true',
            help='ionic relaxation contribution to elastic tensor')
    parser.add_argument('-a', '--all', action='store_true',
            help='print all the elastic tensors listed above')
    parser.add_argument('-f', '--files', nargs='+', required=True,
                            help='location of OUTCAR files')

    args = parser.parse_args()

    for file in args.files:
        print file
        out = o.outcar().read(file)
        if args.total:
            elastic_tensor_total(file)

        if args.sym:
            elastic_tensor_symmetric(file)

        if args.ionic:
            elastic_tensor_ionic(file)

        if args.all:
            elastic_tensor_total(file)
            elastic_tensor_symmetric(file)
            elastic_tensor_ionic(file)
