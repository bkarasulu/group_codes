#! /usr/bin/env python

import ase
from ase.lattice.surface import *
from ase.io import vasp
from ase.calculators.vasp import Vasp
import os, shutil, sys
import numpy as np

# Bulk lattice parameters
a = 5.4524953358405277/2.
c = 8.6008007405135629/2.

# Atomic radii of the element of the hcp surface and the adsorbate
r_hcp = 1.3
r_ads = 0.7

# Set up the surface with a 3x3x6 Ru layers and vacuum of 15 Ang.
surface_unrelaxed = hcp0001('Ru', size=(2,2,6), a=a, c=c, vacuum=7.5)
print surface_unrelaxed[-1]
surface_iend = len(surface_unrelaxed) - 1

# Read the relaxed structure of the adsorbate
adsorbate = ase.io.read('molecule.xyz')

# Read the relaxed surface
surface_relaxed = ase.io.read('POSCAR_relaxed', format='vasp')

# Check if the length of the relaxed and the unrelaxed surfaces are the same
if len(surface_unrelaxed) != len(surface_relaxed):
    print 'Number of atoms in relaxed and unrelaxed surfaces not equal'
    sys.exit(-1)

## Fix the orientation of the adsorbate
#pos = adsorbate.get_positions()
#OO = pos[1] - pos[0]
#adsorbate.rotate(OO, 'z')

# Add the adsorbate on the surface and constrain layers if required
site = 'fcc' # ['ontop', 'hcp', 'fcc', 'bridge']
height = 1.5  #r_hcp + r_ads
ase.lattice.surface.add_adsorbate(surface_unrelaxed, adsorbate, height, position=site, mol_index=0)

ase.io.write('POSCAR_adsorbate_on_unrelaxed_surface.vasp', surface_unrelaxed, format='vasp')

# Now replace the unrelaxed surface with the relaxed surface
for i in range(len(surface_unrelaxed)-len(adsorbate)):
    a = surface_unrelaxed[i]
    b = surface_relaxed[i]
    a.x, a.y, a.z = b.x, b.y, b.z

# Change the name of surface_unrelaxed
atoms = surface_unrelaxed

## Setup the calculations
calc = ase.calculators.vasp.Vasp(
            encut = 400,
            enaug = 645,
            ismear = 1,
            sigma = 0.05,
            lreal = 'Auto',
            prec = 'Normal',
            potim = 0.1,
            ispin = 2,
            ibrion = 2,
            nsw = 40,
            ediff = 1e-5,
            xc = 'PBE',
            kpts = (1,1,1),
            gamma = True)
calc.initialize(atoms)
vasp.write_vasp('POSCAR', calc.atoms_sorted, symbol_count=calc.symbol_count, direct=False)
calc.write_incar(atoms)
calc.write_kpoints()
#shutil.copy('../KPOINTS', 'KPOINTS')
calc.write_potcar()
