#! /usr/bin/env python

import sys
import argparse
import ase.io

# read molecule
# read bond to align and vector to align with
# align
# write molecule in xyz

if __name__ == '__main__':

    parser = argparse.ArgumentParser()

    parser.add_argument('-m', '--molecule', required=True, 
                help='molecule to rotate')
    parser.add_argument('-f', '--format', required=True, 
                help='file format of the molecule')
    parser.add_argument('-b', '--bondatoms', type=int, nargs=2, required=True,
                help='atoms constituting the bond (count starts at 1)')
    parser.add_argument('-v', '--vectortoalign', required=True,
                help='vector align the bond with (accepts x, -y, ...)')
    parser.add_argument('-a', '--addghost', default=0,
                help='if required to add a ghost atom (added in the beginning by default)')

    args = parser.parse_args()


    # read molecule
    m = ase.io.read(args.molecule, format=args.format)
    # read bond to align 
    b1, b2 = [m.positions[i-1] for i in args.bondatoms]
    b1b2 = b2 - b1
    # read vector to align with
    v1v2 = args.vectortoalign
    if 'm' in v1v2:
        v1v2 = v1v2.replace('m', '-')
    # rotate b1b2 into v1v2
    m.rotate(b1b2, v1v2)
    # write molecule in xyz
    ase.io.write('molecule_rotated.xyz', m, format='xyz')
